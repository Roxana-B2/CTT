// Answer the following questions:

// Add the plots to your report and explain them (describe what you see)
Added the screenshots. HAve 401 values from runs saved in steer_pid_data.txt and throttle_pid_datat.txt. Not sure where / how to save the plots. Did lots of experiments to find better values for the cofficients for the porportional, derivative and intergral parts of the error sum. The values for proportional steering and throttle I chose about the same, around 0.2. The value for the integral throttle is the smallest, closest to 0, namely 0.001. In both experiments, the integral coefficient is at least 10 times smaller than the proportional coefficient. For the derivative cofficient I chose values smaller (even half) than for the proportional, but later, after the formula changes, tried with bigger values (even double) than for the proportional. Had same values for steer and throttle in the beginning, so I can better compare the behaviors, but that is wrong, so I figured we need all cofficients with smaller values for throttle.
The other values (not integral) well, trial and error honestly, observed different behaviors with differnt values. At the beginning it was crashing on the right wall, then the Citroen in front, then after correcting the formula of error steer, was shooting way left, crashing on the left wall. At some point it tried to climb the wall on the right, after crashing in it. Once it had a funny strange S trajectory, like avoided the Citroen, crashed into the right wall, managed to steer away from it, went to the left, then to the right and again crashed in the wall. Like a sinusoidal function curve.
Also tried different formulas how to compute the error steer, the best seems to be using the atan between coordinates of the vehicle position the the coordinates of the position in the trajectory that correspond to a shortest distance. In other words, we compute the distance to the closest point on the car trajectory and the real position of the car, and use that in the atan formula, not the last 2 points in the trajectory difference, or the last and first point difference etc.
Also have the terms in the total error sum with plus, not minus, am not sure why it is working like that corectly with the rest of the provided code.

// What is the effect of the PID according to the plots, how each part of the PID affects the control command?
P stands for the proportional term of the current cross track error, so in expriments its value change has the biggest, direct, immedate effect on the heading of the car.
D stands for the derivative term, so we take the difference between the current and last error, divided by the dt. Its effect is doing a smooth of the path, having less abrupt oscillations in one direction or the other.
I stands for the integral part, the sum of all the errors over a period of time dt. For this project, where we only had to overtake 2 cars in front and just drive a couple meters, it worked best with small almost negligible values.

// How would you design a way to automatically tune the PID parameters?
Algorithms such as Twiddle, or other hill climbing ones can be used with the Carla simulation to learn the parameters offline. I think it is important to run lots of expriments in simulation before real life scenarios, to see which values of the parameters fit which situations. There are intersections crossings when the traffic lights turn green, there is driving on the highway with normal conditions, there is driving around a construction field part or an accident on the highway, there is situation when a police car or ambulance has to drive pass our location and we have to get out of the way, there is driving around a school in the city, where lots of kids can jump on the street, from different directions. In some cases, probably the hill climbing has to be gentler learning, slower paced, in other scenarios quicker, and more aggressively coming with values in the right direction, even if we reach in local minima.

// PID controller is a model free controller, i.e. it does not use a model of the car. Could you explain the pros and cons of this type of controller?
The advantages are that it is easy, rather straight-forward to implement, short code to look at for mistakes, and that is it quick in computation. It is a nice mathematical model that one can apply and quickly see results.
I can also imagine it would perform good if we use it in various weather conditions or situations and apply offline some machine learning on top, because it has the derivative part (so short-attention span) and the integral part (long-time attention span for the errors). What I mean is if one of the sensors is broken, or we have started in a fog scenario, or dark lighting or blending light, then the noise in cross track error should be proportional to a term and only accumulate over time with the same factor. And we could apply machine learning on top to realize what scenario it is and what it is best to do, if situation X occurs, not just steer more and more in one direction, because one cofficient goes through the roof (or not if we bound it between a min and max bounds like here, but has the same oscillating pattern).
Also, not taking the model of the car in consideration, means it is applicable for different car models, another pro.
Disadvantage is that without a car model, it looks more like a computer game simulation than a real driving scenario. What I mean is when we overtake one car, we just change the heading, apply steering, then shortly after we are parallel to the car, we get back in line, maybe even brush the car, who cares. Imagine you got a truck instead of a small car, which is considerably longer and heavier, different velocity, not taking any physics into consideration, like length of vehicle, we would for sure crash the car in simulation. Like in theory, our cofficients are fine, we did out work, we steer, turn left, but we destroy the other car once we get back in lane.

// (Optional) What would you do to improve the PID controller?
